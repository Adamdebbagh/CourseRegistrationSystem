{"name":"Course registration system","tagline":"","body":"# Course Registration System\r\n## Team Members:\r\n\r\n* Project Manager: Giuseppe Zerilli\r\n\r\n* Customer Analyst: Wade Baisden\r\n\r\n* Software Engineer 1: Adam Debbagh\r\n\r\n* Software Engineer 2: Carlos Reyes\r\n\r\n* Project Control: Solomon Lagat\r\n\r\n\r\n\r\n## Requirements\r\n\r\nThis case is a logical description of the desired application. Your task is to analyze and design the data and processes to develop an automated application to perform course registration. \r\nA student completes a registration request form and mails or delivers it to the registrar's office.A clerk enters the request into the system. \r\n\r\nFirst, the Accounts Receivable subsystem is checked to ensure that no fees are owed from the previous quarter. \r\nNext, for each course, the student transcript is checked to ensure that the course prerequisites are completed. \r\nThen, class position availability is checked; If all checks are successful, the student's social security number is added to the class list.The acknowledgment back to the student shows the result of registration processing as follows: \r\n\r\nIf fees are owing, a bill is sent to the student; no registration is done and the acknowledgment contains the amount due.If prerequisites for a course are not filled, the acknowledgment lists prerequisites not met and that course is not registered.If the class is full, the student acknowledgment is marked with 'course closed.’\r\nIf a student is accepted into a class, the day, time, and room are printed next to the course number. Total tuition owed is computed and printed on the acknowledgment.Student fee information is interfaced to the Accounts Receivable subsystem.Course enrollment reports are prepared for the instructors.\r\n\r\n## Analysis and Design Method\r\n\r\nwe follow an Object-Oriented approach because it gives precedence of data over function. here I include few reasons to support my suggestion :\r\n\r\nObject-Oriented allows for enforcing the concept of information hiding, which is the encapsulation and segregation of data behind well-defined interfaces. In other word,  it would allow us to hide the design and implementation decisions we take, and to only give access to the data through interfaces. \r\nObject-Oriented makes code more maintainable. Because the rest of our course registration system doesn't have to be concerned about our implementation details and therefore, any change we make on one part of our system doesn't concern nor affect the rest of the system. as long as we keep the interfaces consistent.\r\nInheritance is another reason on focusing on objects and encapsulating the information into cohesive entities. inheritance would allows us to reuse our objects definitions (student, course..etc) by incremental refinement.\r\n\r\n## Structural Analysis\r\n\r\n\r\n1- A student completes a registration request form and mails or delivers it to the registrar's office.\r\n \r\n2- A clerk enters the request into the system. \r\n\r\n3- First, the Accounts Receivable subsystem is checked to ensure that no fees are owed from the previous quarter. \r\n\r\n4- Next, for each course, the student transcript is checked to ensure that the course prerequisites are completed. \r\n\r\n5- Then, class position availability is checked; If all checks are successful, the student's social security number is added to the class list.\r\n\r\n6- The acknowledgment back to the student shows the result of registration processing as follows: \r\n\r\n\t6-a If fees are owing, a bill is sent to the student; no registration is done and the acknowledgment contains the amount due. \r\n\t6-b If prerequisites for a course are not filled, the acknowledgment lists prerequisites not met and that course is not registered. \r\n\r\n\t6-c If the class is full, the student acknowledgment is marked with 'course closed.’\r\n\t6-d If a student is accepted into a class, the day, time, and room are printed next to the course number. Total tuition owed is computed and printed on the acknowledgment. \r\n7- Student fee information is interfaced to the Accounts Receivable subsystem. \r\n\r\n8- Course enrollment reports are prepared for the instructors.\r\n\r\n\r\n### Classes :\r\n\r\n student, registration request form, registration’s office & clerk (defined together as registration Manager), Accounts Receivable subsystem, course, class, acknowledgment, bill, instructor\r\n\r\n\r\n### Attributes : \r\n\r\nstudent: fee, transcript, social security number.\r\nregistration request form : student Name, Major, social security number, course offerings. \r\n registration Manager : registration, \r\n Accounts Receivable subsystem : fee,\r\n - course : prerequisites, course number, course offerings,\r\n class : position, studentsList, full\r\nacknowledgment : result, amount due, prerequisites, day, time, room, course number, total tuition, course closed\r\nbill : fees \r\ninstructor : enrollment reports\r\n\r\n\r\n### Operations : \r\n\r\nstudent: sendForm(), getRegistrationStatus().\r\nregistration request form : showForm(). \r\nregistration Manager :  addCourseNumber(). addCourseOfferings(), addCoursePrerequisites(), addCourseTime(),addCourseRoom(),addCourseTuition(), getForm().\r\n Accounts Receivable subsystem : isFeeOwed(), getStudentFee().\r\n course : isPrequisitesCompleted().\r\n class : isPositionAvailable(), addStudent(), isClassFull().\r\nacknowledgment : showResult().\r\nbill : sentBill().\r\ninstructor : showInstructorReport().\r\n\r\n\r\n## Class Diagram (coming soon..)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}